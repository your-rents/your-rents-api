<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.your-rents.api</groupId>
	<artifactId>your-rents-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>YourRents API</name>
	<description>Backend API for YourRents applications</description>
	<organization>
		<name>Your Rents Team</name>
		<url>https://github.com/your-rents</url>
	</organization>
	<developers>
		<developer>
			<id>benfante</id>
			<name>Lucio Benfante</name>
			<email>lucio.benfante@gmail.com</email>
			<url>https://github.com/benfante</url>
			<organization>Benfante Lucio</organization>
			<organizationUrl>http://www.benfante.com</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>Europe/Rome</timezone>
			<properties>
				<picUrl>https://avatars.githubusercontent.com/u/134066?v=4</picUrl>
			</properties>
		</developer>
		<developer>
			<id>egch</id>
			<name>Enrico Giurin</name>
			<email>enricogiurin@gmail.com</email>
			<url>https://github.com/egch</url>
			<roles>
				<role>developer</role>
			</roles>
			<timezone>Europe/Rome</timezone>
			<properties>
				<picUrl>https://avatars.githubusercontent.com/u/11061018?v=4</picUrl>
			</properties>
		</developer>
	</developers>
	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/your-rents/your-rents-api/issues</url>
	</issueManagement>
	<scm>
		<connection>scm:git:https://github.com/your-rents/your-rents-api.git</connection>
		<developerConnection>scm:git:git@github.com:your-rents/your-rents-api.git</developerConnection>
		<url>https://github.com/your-rents/your-rents-api</url>
	</scm>
	<inceptionYear>2023</inceptionYear>
	<url>https://github.com/your-rents/your-rents-api</url>
	<licenses>
		<license>
			<name>Apache-2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>21</java.version>
		<springdoc-openapi-ui.version>2.2.0</springdoc-openapi-ui.version>
		<maven.compiler.release>${java.version}</maven.compiler.release>
		<maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
		<license-maven-plugin.version>2.5.0</license-maven-plugin.version>
		<maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>
		<spring-boot.version>3.5.0</spring-boot.version>
		<springdoc-openapi-ui.version>2.8.9</springdoc-openapi-ui.version>
		<testcontainers-jooq-codegen-maven-plugin.version>0.0.4</testcontainers-jooq-codegen-maven-plugin.version>
		<plugins.testcontainers.version>1.21.1</plugins.testcontainers.version>
		<plugins.postgresql.version>42.7.7</plugins.postgresql.version>
		<your-rents-services-geodata.version>0.0.4</your-rents-services-geodata.version>
		<building.db.username>your_rents</building.db.username>
		<building.db.password>your_rents</building.db.password>
	</properties>
	<dependencies>
		<dependency>
			<groupId>com.your-rents.services</groupId>
			<artifactId>your-rents-services-geodata</artifactId>
			<version>${your-rents-services-geodata.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
    <!-- Hibernate Validator (Bean Validation implementation) -->
    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
    </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-docker-compose</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi-ui.version}</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>properties</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<argLine>-javaagent:${org.mockito:mockito-core:jar}</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>${license-maven-plugin.version}</version>
				<configuration>
					<verbose>false</verbose>
					<addSvnKeyWords>false</addSvnKeyWords>
					<licenseName>apache_v2</licenseName>
					<licenseFile>${basedir}/LICENSE</licenseFile>
				</configuration>
				<executions>
					<execution>
						<id>update-license-headers</id>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<licenseName>apache_v2</licenseName>
							<excludes>
								<exclude>**/*.json</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin.version}</version>
				<executions>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>3.0</version>
								</requireMavenVersion>
								<requireJavaVersion>
									<version>${java.version}</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>groovy-maven-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<?m2e execute onConfiguration?>
						<id>start-db</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								db = new org.testcontainers.containers.PostgreSQLContainer("postgres:15-alpine")
									.withUsername("${building.db.username}")
									.withDatabaseName("postgres")
									.withPassword("${building.db.password}");
								db.start();
								project.properties.setProperty('building.db.url', db.getJdbcUrl());
							</source>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.testcontainers</groupId>
						<artifactId>postgresql</artifactId>
						<version>${plugins.testcontainers.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<executions>
					<execution>
						<?m2e execute onConfiguration?>
						<id>db-migration-global</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>migrate</goal>
						</goals>
						<configuration>
							<url>${building.db.url}</url>
							<user>${building.db.username}</user>
							<password>${building.db.password}</password>
							<createSchemas>true</createSchemas>
							<schemas>
								global
							</schemas>
							<locations>
								<location>
									filesystem:${project.basedir}/src/main/resources/db/migration/global
								</location>
							</locations>
						</configuration>
					</execution>
					<execution>
						<?m2e execute onConfiguration?>
						<id>db-migration-tenant</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>migrate</goal>
						</goals>
						<configuration>
							<url>${building.db.url}</url>
							<user>${building.db.username}</user>
							<password>${building.db.password}</password>
							<createSchemas>true</createSchemas>
							<schemas>
								00000000-0000-0000-0000-000000000001
							</schemas>
							<locations>
								<location>
									filesystem:${project.basedir}/src/main/resources/db/migration/tenant
								</location>
							</locations>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<executions>
					<execution>
						<?m2e execute onConfiguration?>
						<id>java-generator-global</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<jdbc>
								<url>${building.db.url}</url>
								<user>${building.db.username}</user>
								<password>${building.db.password}</password>
							</jdbc>
							<generator>
								<database>
									<name>org.jooq.meta.postgres.PostgresDatabase</name>
									<includes>.*</includes>
									<excludes>flyway_schema_history</excludes>
									<inputSchema>global</inputSchema>
								</database>
								<target>
									<packageName>com.yourrents.api.jooq.global</packageName>
									<directory>target/generated-sources/jooq</directory>
								</target>
							</generator>
						</configuration>
					</execution>
					<execution>
						<?m2e execute onConfiguration?>
						<id>java-generator-tenant</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<jdbc>
								<url>${building.db.url}</url>
								<user>${building.db.username}</user>
								<password>${building.db.password}</password>
							</jdbc>
							<generator>
								<database>
									<name>org.jooq.meta.postgres.PostgresDatabase</name>
									<includes>.*</includes>
									<excludes>flyway_schema_history</excludes>
									<inputSchema>00000000-0000-0000-0000-000000000001</inputSchema>
									<outputSchema>tenant</outputSchema>
									<forcedTypes>
										<forcedType>
										<userType>com.yourrents.api.property.PropertyType</userType>
										<binding>com.yourrents.api.property.PropertyTypeBinding</binding>
										<includeExpression>.*\.type</includeExpression>
										</forcedType>
									</forcedTypes>
								</database>
								<target>
									<packageName>com.yourrents.api.jooq.tenant</packageName>
									<directory>target/generated-sources/jooq</directory>
								</target>
							</generator>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<image>
						<name>yourrents/your-rents-api:latest</name>
					</image>
				</configuration>
			</plugin>


		</plugins>
	</build>

</project>